"""init

Revision ID: 833e09f0bf1a
Revises: 
Create Date: 2025-02-22 17:09:34.733568

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import geoalchemy2

# revision identifiers, used by Alembic.
revision: str = '833e09f0bf1a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('newsletter_subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    schema='false_positive'
    )
    op.create_table('nodes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('display_name', sa.String(), nullable=False),
    sa.Column('latitude', sa.Numeric(), nullable=False),
    sa.Column('longitude', sa.Numeric(), nullable=False),
    sa.Column('node_type', sa.Enum('dam', 'place', 'junction', name='node_type', schema='false_positive'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_table('dams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('border_geometry', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('max_volume', sa.Numeric(), nullable=True),
    sa.Column('description', sa.Text(), server_default='', nullable=True),
    sa.Column('municipality', sa.String(), nullable=False),
    sa.Column('owner', sa.String(), nullable=True),
    sa.Column('owner_contact', sa.String(), nullable=True),
    sa.Column('operator', sa.String(), nullable=True),
    sa.Column('operator_contact', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['false_positive.nodes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_table('junctions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('source_node_id', sa.UUID(), nullable=False),
    sa.Column('target_node_id', sa.UUID(), nullable=False),
    sa.Column('max_flow_rate', sa.Numeric(), nullable=True),
    sa.Column('current_flow_rate', sa.Numeric(), nullable=True),
    sa.Column('length', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['id'], ['false_positive.nodes.id'], ),
    sa.ForeignKeyConstraint(['source_node_id'], ['false_positive.nodes.id'], ),
    sa.ForeignKeyConstraint(['target_node_id'], ['false_positive.nodes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_table('places',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('population', sa.Integer(), nullable=True),
    sa.Column('consumption_per_capita', sa.Numeric(), nullable=True),
    sa.Column('water_price', sa.Numeric(), nullable=True),
    sa.Column('non_dam_incoming_flow', sa.Numeric(), nullable=True),
    sa.Column('radius', sa.Numeric(), nullable=True),
    sa.Column('municipality', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['false_positive.nodes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_table('dam_alerts',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dam_id', sa.UUID(), nullable=False),
    sa.Column('severity', sa.Enum('info', 'warning', 'critical', name='alert_severity', schema='false_positive'), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['dam_id'], ['false_positive.dams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_table('dam_bulletin_measurements',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dam_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('volume', sa.Numeric(), nullable=True),
    sa.Column('fill_volume', sa.Numeric(), nullable=True),
    sa.Column('avg_incoming_flow', sa.Numeric(), nullable=True),
    sa.Column('avg_outgoing_flow', sa.Numeric(), nullable=True),
    sa.ForeignKeyConstraint(['dam_id'], ['false_positive.dams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_table('dam_places',
    sa.Column('dam_id', sa.UUID(), nullable=False),
    sa.Column('place_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['dam_id'], ['false_positive.dams.id'], ),
    sa.ForeignKeyConstraint(['place_id'], ['false_positive.places.id'], ),
    sa.PrimaryKeyConstraint('dam_id', 'place_id'),
    schema='false_positive'
    )
    op.create_table('satellite_images',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dam_id', sa.UUID(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('image_url', sa.String(), nullable=False),
    sa.Column('bounding_box', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['dam_id'], ['false_positive.dams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.create_index('idx_satellite_images_bounding_box', 'satellite_images', ['bounding_box'], unique=False, schema='false_positive', postgresql_using='gist')
    op.create_table('user_bill_forms',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('place_id', sa.UUID(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['place_id'], ['false_positive.places.id'], ),
    sa.PrimaryKeyConstraint('id'),
    schema='false_positive'
    )
    op.drop_table('projects')
    op.drop_table('mentors')
    op.drop_table('teams')
    op.drop_table('discord')
    op.drop_table('github_repos')
    op.drop_table('join_requests')
    op.drop_table('sessions')
    op.drop_table('github_installations_to_participants')
    op.drop_index('github_installations_app_installation_id_index', table_name='github_installations')
    op.drop_table('github_installations')
    op.drop_table('verification_tokens')
    op.drop_table('accounts')
    op.drop_table('tshirts')
    op.drop_table('users')
    op.drop_table('invitations')
    op.drop_table('participants')
    op.drop_table('admins')
    op.drop_table('notifications')
    op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('spatial_ref_sys',
    sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    sa.CheckConstraint('srid > 0 AND srid <= 998999', name='spatial_ref_sys_srid_check'),
    sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('target_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reference_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('invitation', 'ask_join', name='notifications_types'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['target_user_id'], ['participants.id'], name='notifications_target_user_id_participants_id_fk'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_table('admins',
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='admins_user_id_users_id_fk'),
    sa.PrimaryKeyConstraint('user_id', name='admins_pkey')
    )
    op.create_table('participants',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('participants_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('middle_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('grade', postgresql.ENUM('8', '9', '10', '11', '12', name='grade'), autoincrement=False, nullable=False),
    sa.Column('class', postgresql.ENUM('А', 'Б', 'В', 'Г', name='class'), autoincrement=False, nullable=False),
    sa.Column('allergies', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=True),
    sa.Column('tshirt_id', sa.INTEGER(), server_default=sa.text("nextval('participants_tshirt_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('is_disqualified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('technologies', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('is_looking_for_team', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('is_captain', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('question1_answer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('question2_answer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='participants_team_id_teams_id_fk'),
    sa.ForeignKeyConstraint(['tshirt_id'], ['tshirts.id'], name='participants_tshirt_id_tshirts_id_fk'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='participants_user_id_users_id_fk'),
    sa.PrimaryKeyConstraint('id', name='participants_pkey'),
    sa.UniqueConstraint('phone_number', name='participants_phone_number_unique'),
    postgresql_ignore_search_path=False
    )
    op.create_table('invitations',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('invited_participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sender_participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_accepted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['invited_participant_id'], ['participants.id'], name='invitations_invited_participant_id_participants_id_fk'),
    sa.ForeignKeyConstraint(['sender_participant_id'], ['participants.id'], name='invitations_sender_participant_id_participants_id_fk'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='invitations_team_id_teams_id_fk'),
    sa.PrimaryKeyConstraint('id', name='invitations_pkey'),
    sa.UniqueConstraint('invited_participant_id', 'team_id', name='invitations_invited_participant_id_team_id_unique')
    )
    op.create_table('users',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email_verified', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('participant_id', sa.INTEGER(), server_default=sa.text("nextval('users_participant_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_unique'),
    postgresql_ignore_search_path=False
    )
    op.create_table('tshirts',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('tshirts_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('tshirt_size', postgresql.ENUM('XS', 'S', 'M', 'L', 'XL', 'XXL', name='tshirt_size'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tshirts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('accounts',
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider_account_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='accounts_user_id_users_id_fk', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('provider', 'provider_account_id', name='accounts_provider_provider_account_id_pk')
    )
    op.create_table('verification_tokens',
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('identifier', 'token', name='verification_tokens_identifier_token_pk')
    )
    op.create_table('github_installations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('github_installations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('app_installation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('is_suspended', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='github_installations_pkey'),
    sa.UniqueConstraint('app_installation_id', name='github_installations_app_installation_id_unique'),
    postgresql_ignore_search_path=False
    )
    op.create_index('github_installations_app_installation_id_index', 'github_installations', ['app_installation_id'], unique=False)
    op.create_table('github_installations_to_participants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('installation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('linked_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['installation_id'], ['github_installations.id'], name='github_installations_to_participants_installation_id_github_ins'),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name='github_installations_to_participants_participant_id_participant'),
    sa.PrimaryKeyConstraint('id', name='github_installations_to_participants_pkey'),
    sa.UniqueConstraint('installation_id', 'participant_id', name='github_installations_to_participants_installation_id_participan')
    )
    op.create_table('sessions',
    sa.Column('session_token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_users_id_fk', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('session_token', name='sessions_pkey')
    )
    op.create_table('join_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='join_requests_team_id_teams_id_fk'),
    sa.PrimaryKeyConstraint('id', name='join_requests_pkey')
    )
    op.create_table('github_repos',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('github_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('installation_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_accepted_commit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('last_accepted_commit_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_accepted_commit_received_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_accepted_push_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_suspended', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['installation_id'], ['github_installations.id'], name='github_repos_installation_id_github_installations_id_fk'),
    sa.ForeignKeyConstraint(['participant_id'], ['participants.id'], name='github_repos_participant_id_participants_id_fk'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='github_repos_project_id_projects_id_fk'),
    sa.PrimaryKeyConstraint('id', name='github_repos_pkey'),
    sa.UniqueConstraint('github_id', name='github_repos_github_id_unique')
    )
    op.create_table('discord',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('participant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mentor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discord_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discord_username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='discord_pkey'),
    sa.UniqueConstraint('discord_id', name='discord_discord_id_unique')
    )
    op.create_table('teams',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('mentor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('technologies', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_text_channel_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discord_voice_channel_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('discord_category_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('member_count', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('semi_final', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('semi_final_result', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('is_finalist', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('final_result', sa.NUMERIC(precision=3, scale=2), server_default=sa.text('0.00'), autoincrement=False, nullable=False),
    sa.Column('table_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['mentor_id'], ['mentors.id'], name='teams_mentor_id_mentors_id_fk'),
    sa.PrimaryKeyConstraint('id', name='teams_pkey'),
    sa.UniqueConstraint('discord_category_id', name='teams_discord_category_id_unique'),
    sa.UniqueConstraint('discord_text_channel_id', name='teams_discord_text_channel_id_unique'),
    sa.UniqueConstraint('discord_voice_channel_id', name='teams_discord_voice_channel_id_unique'),
    sa.UniqueConstraint('mentor_id', name='teams_mentor_id_unique'),
    postgresql_ignore_search_path=False
    )
    op.create_table('mentors',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('mentors_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('technologies', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('job_position', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('tues_vispusk', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('schedule', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('where', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('discord_user_snowflake', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('has_team_role', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='mentors_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('projects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('technologies', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('website_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('fallback_repo_urls', sa.VARCHAR(), server_default=sa.text("''::character varying"), autoincrement=False, nullable=False),
    sa.Column('team_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], name='projects_team_id_teams_id_fk'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    sa.UniqueConstraint('team_id', name='projects_team_id_unique')
    )
    op.drop_table('user_bill_forms', schema='false_positive')
    op.drop_index('idx_satellite_images_bounding_box', table_name='satellite_images', schema='false_positive', postgresql_using='gist')
    op.drop_table('satellite_images', schema='false_positive')
    op.drop_table('dam_places', schema='false_positive')
    op.drop_table('dam_bulletin_measurements', schema='false_positive')
    op.drop_table('dam_alerts', schema='false_positive')
    op.drop_table('places', schema='false_positive')
    op.drop_table('junctions', schema='false_positive')
    op.drop_table('dams', schema='false_positive')
    op.drop_table('nodes', schema='false_positive')
    op.drop_table('newsletter_subscriptions', schema='false_positive')
    # ### end Alembic commands ###
